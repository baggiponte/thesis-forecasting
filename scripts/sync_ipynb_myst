#! /usr/bin/env bash

_pair_notebooks () {

    # the format of the paired notebook, i.e. Rmd, md:myst...
    TO_FORMAT="$1"
    
    # the file to convert/pair
    INPUT_FILE="$2"

    # origin file name
    FILENAME="$(basename "$2")"

    # if format is md:myst, remove ":myst"
    EXTENSION="${TO_FORMAT/:*/}" 

    # define destiantion filename by replacing .ipynb with the new extension
    TO_FILE="${FILENAME/.ipynb/."$EXTENSION"}"

    # run the script only if the file ($1) is not already paired at the destination
    if [[ ! -e "${TARGET_DIR}/$TO_FILE" ]] ; then
        
        echo "${BOLD}${BLUE}==>${RESET}${BOLD} Pairing ${BLUE}${FILENAME}${RESET}${BOLD} to ${BLUE}${TO_FILE}${RESET}"
        
        # pair the notebook from the execution dir to the desired format in the destination dir
        jupytext --set-formats \
        "$(basename "$NB_DIR")"///ipynb,"$(basename "$TARGET_DIR")"///"$TO_FORMAT" \
        "$INPUT_FILE"
        
        # just add a blank line
        echo ""
    fi
}

_update_sync () {

    # the format of the paired notebook, i.e. Rmd, md:myst...
    TO_FORMAT="$1"
    
    # the file to convert/pair
    INPUT_FILE="$2"

    # origin file name
    FILENAME="$(basename "$2")"

    # if format is md:myst, remove ":myst"
    EXTENSION="${TO_FORMAT/:*/}" 

    # define destiantion filename by replacing .ipynb with the new extension
    TO_FILE="${FILENAME/.ipynb/."$EXTENSION"}"

    echo -e "${BOLD}${CYAN}==>${RESET}${BOLD} Updating sync between ${CYAN}${FILENAME}${RESET}${BOLD} to ${CYAN}${TO_FILE}${RESET}"
    
    # sync notebooks
    jupytext --sync "$INPUT_FILE"
    
    # echo a blank line
    echo ""
}

# shellcheck source=formatting_colors
source "formatting_colors"

# need to rewrite this with getopt (not getopts, so that it accepts flags like --long instead of -l)
TO_FORMAT=${1:-"md:myst"}
ROOT_DIR=${2:-"$HOME/tesi/"}
NB_DIR=${3:-"notebooks"}
TARGET_DIR=${4:-"body"}

pushd "$ROOT_DIR" 1>/dev/null || exit

# if the directory that contains the notebooks does not exist, exit the program
if [[ ! -d "$NB_DIR" ]] ; then
    echo "${BOLD}${RED}${NB_DIR}${RESET}${BOLD} does not exist. Please insert a valid path."
    exit
fi


# if the target directory does not exist, create it
[[ -d "$TARGET_DIR" ]] || mkdir "${TARGET_DIR}"

# prompt user, and read command line argument. See:
# https://alvinalexander.com/linux-unix/shell-script-how-prompt-read-user-input-bash/
while true ; do

    echo -e "\n${BOLD}This will affect notebooks in ${BLUE}${ROOT_DIR}${NB_DIR}${RESET}${BOLD} and ${YELLOW}${TO_FORMAT}${RESET}${BOLD} files in ${BLUE}${ROOT_DIR}${TARGET_DIR}.${RESET}"
    read -rp "${BOLD}Do you want to ${VIOLET}pair [p]${RESET}${BOLD} notebooks or ${VIOLET}sync [s]${RESET}${BOLD} the recent updates? ${VIOLET}[p/s]${RESET} " ANSWER
    echo ""

    # handle the input
    case $ANSWER in
        [pP]* ) for IPYNB in "$NB_DIR"/*.ipynb ; do
                    _pair_notebooks "$TO_FORMAT" "$IPYNB"
                done

                break;;

        [sS]* ) for IPYNB in "$NB_DIR"/*.ipynb ; do
                    _update_sync "$TO_FORMAT" "$IPYNB"
                done
        
                break;;

            * ) echo "Enter y or n, please.";;
    esac
done

popd 1>/dev/null || exit
