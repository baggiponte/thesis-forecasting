import warnings  # suppress future warnings

import pandas as pd
import numpy as np
import psycopg2

import matplotlib.pyplot as plt
import seaborn as sns

from typing import Optional

from pandas.plotting import register_matplotlib_converters

pd.options.display.float_format = '{:.3f}'.format
register_matplotlib_converters()

# set settings for seaborn
sns.set_style(style="whitegrid", rc={"grid.color": ".9"})
sns.set_palette(palette="deep")
sns_c = sns.color_palette(palette="deep")

# customise matplotlib and sns plot dimensions
plt.rcParams["figure.figsize"] = [12, 6]
plt.rcParams["figure.dpi"] = 100
title_font = {"fontname": "DejaVu Sans Mono"}

conn = psycopg2.connect("dbname = bikemi user=luca")

warnings.simplefilter(action="ignore", category=FutureWarning)


def retrieve_daily_data(connection, wide: bool = False) -> pd.DataFrame:
    query = """
        SELECT
            cdr.data_partenza,
            cdr.cluster,
            cdr.noleggi_giornalieri
        FROM bikemi_rentals.clusters_daily_rentals cdr
    """

    if not wide:
        return pd.read_sql(query, connection).rename(index=str.title)
    return (
        pd.read_sql(query, connection)
            .pivot(index="data_partenza", columns="cluster", values="noleggi_giornalieri")
            .rename(columns=str.title)
            .asfreq("D")
    )


daily_rentals: pd.DataFrame = retrieve_daily_data(conn, wide=True)

from sklearn.metrics import (
    mean_absolute_error,
    mean_squared_error,
    mean_squared_log_error,
    mean_absolute_percentage_error,
)


def model_diagnostics(y_pred: pd.Series, y_true: pd.Series) -> pd.DataFrame:
    cols = ["MAE", "RMSE", "RMSLE"]

    scores = [
        mean_absolute_error(y_true, y_pred),
        mean_squared_error(y_true, y_pred, squared=True),
        mean_squared_log_error(y_true, y_pred, squared=True),
    ]
    return pd.DataFrame({"metrics": cols, "scores": scores}).round(5).T

from sktime.forecasting.model_selection import SlidingWindowSplitter

cv_generator = SlidingWindowSplitter(fh=np.arange(1, 8),
                                     step_length=1,
                                     window_length=365
                                     )


def get_cv_predictions(evaluated_cv: pd.DataFrame) -> pd.DataFrame:
    return (
        pd.concat([evaluated_cv["y_pred"][k] for k in range(evaluated_cv.shape[0])], axis=1)
            .apply(np.mean, axis=1)
            .rename("predictions")
    )

from sktime.forecasting.naive import NaiveForecaster
from sktime.utils.plotting import plot_series

y = daily_rentals["Brera - 25"]
y_true = daily_rentals["Brera - 25"][365:]

naive_forecaster = NaiveForecaster(strategy="last",
                                   sp=7)  # weekly seasonal periodicity

quick_naive_preds = pd.Series(data=daily_rentals["Brera - 25"][358:-7].values, index=y[365:].index)
naive_fig = plot_series(quick_naive_preds, y_true, labels=["naive preds", "truth"])
plt.title("Naive forecasts", **title_font)
plt.show(naive_fig)

naive_diagnostics = model_diagnostics(quick_naive_preds, y_true)

naive_diagnostics

import pmdarima as pm

y_train, y_test = model_selection.train_test_split(y, train_size=0.1)

# Fit a simple auto_arima model
autoarima = pm.auto_arima(y_train,
                          start_p=0, start_q=0,
                          max_p=5, max_q=5,
                          d=0,  # only seasonal differencing
                          m=7,
                          start_P=1, start_Q=1,
                          max_P=5, max_Q=5,
                          D=1,
                          test="kpss",
                          information_criterion="bic",
                          trace=True,
                          seasonal=True,
                          stepwise=True,
                          error_action='trace',
                          suppress_warnings=True,
                          random_state=42)

import warnings
warnings.filterwarnings("UserWarning")

autoarima.plot_diagnostics(figsize=(10,8))
plt.plot()

from pmdarima import model_selection

sliding_arima = pm.ARIMA(order=autoarima.order,
                         seasonal_order=autoarima.seasonal_order,
                         suppress_warnings=True)

pmdarima_cv = model_selection.SlidingWindowForecastCV(window_size=365,
                                                      h=14,
                                                      step=7
)

pdmarima_predictions = model_selection.cross_val_predict(sliding_arima, y,
                                                cv=pmdarima_cv, verbose=False,
                                                averaging="mean")

pmdarima_fig = plot_series(pd.DataFrame(pdmarima_predictions, index=y_true[4:].index), y_true[4:], labels=["Auto-ARIMA", "truth"])
plt.title("Auto-ARIMA forecasts", **title_font)
plt.show(pmdarima_fig)

pmdarima_diagnostics = model_diagnostics(pdmarima_predictions, y_true[4:])
pmdarima_diagnostics

from sktime.forecasting.fbprophet import Prophet

prophet_forecaster = Prophet(add_country_holidays={'country_name': 'Italy'},
                             daily_seasonality=False,
                             weekly_seasonality=True,
                             yearly_seasonality=True)

prophet_fit = evaluate(prophet_forecaster, cv_generator, y, return_data=True)

prophet_preds = get_cv_predictions(prophet_fit)
prophet_fig = plot_series(y_true, prophet_preds, labels=["Truth", "Prophet"])
plt.title("Prophet forecasts", **title_font)
plt.show(prophet_fig)

def remove_negatives(data: pd.DataFrame) -> pd.DataFrame:
    data[data < 0] = 1
    return data


prophet_diagnostics = prophet_preds.pipe(remove_negatives).pipe(model_diagnostics, y_true)
prophet_diagnostics
